---
import Layout from "../../layouts/Layout.astro";
import Construction from "../../components/Construction.astro";
import { Image, Picture } from "astro:assets";
import { Icon } from "astro-icon/components";
import portrait from "../../images/portrait.png";
import { getCollection } from "astro:content";
import { getEntry } from "astro:content";
import Progress from "../../components/Progress.astro";
import SkillCarousel from "../../components/SkillCarousel.vue";

export function getStaticPaths() {
	return [
		{ params: { lang: "fr" as const } },
		{ params: { lang: "en" as const } },
	];
}

const { lang } = Astro.params;

const txts = (
	{
		fr: {
			otherLang: "English",
			_otherLang: "en",
			skills: "Compétences",
			focus: "Focus",
			lang: "Language",
			writen: "Ecris",
			spoken: "Parler",
			prog: "Programmation",
			hobby: "Passe-Temps",
			hobbyList: [
				{
					title: "Programmation",
					desc: "J'aime travailler sur des projets de programmation personnels qui allient matériel et logiciel pour apprendre de nouvelles technologies.",
				},
				{
					title: "Camping",
					desc: "J'aime partir en camping avec mon chien pour profiter de la nature et vivre des aventures en plein air.",
				},
				{
					title: "Jeux en ligne",
					desc: "J'aime jouer à des jeux en ligne avec des modifications personnalisées qui demandent créativité, stratégie et exploration.",
				},
			],
		},
		en: {
			otherLang: "Francais",
			_otherLang: "fr",
			skills: "Skills",
			focus: "Focus",
			lang: "Language",
			writen: "Writen",
			spoken: "Spoken",
			prog: "Programming",
			hobby: "Hobbies",
			hobbyList: [
				{
					title: "Programation",
					desc: "I enjoy working on personal programming projects that bridge hardware and software to learn new technology",
				},
				{
					title: "Camping",
					desc: "I enjoy going camping with my dog to enjoy nature and have outdoor adventures.",
				},
				{
					title: "Online gaming",
					desc: "I enjoy playing online games with custom modifications that involve creativity, strategy, and exploration.",
				},
			],
		},
	} as const
)[lang];
---

<Layout title="Welcome to Astro.">
	{import.meta.env.PROD && <Construction />}
	<header>
		<div class="containe-fluidr">
			<div class="left">
				<div class="portrait">
					<Image
						widths={[240, 540, 720, portrait.width]}
						sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${portrait.width}px`}
						src={portrait}
						alt="Portrait of Marc-Antoine"
					/>
					<button
						class="outline contrast cryptedmailjs"
						data-name="marc-antoine"
						data-domain="desrochers"
						data-tld="space"
						aria-label="Send email"
					>
						<Icon name="mdi:email-outline" size="1.25rem" />
					</button>
				</div>
				<b>Marc-Antoine Desrochers</b>
				<nav>
					<a href={`/${txts._otherLang}/`} aria-current="page"
						><Icon name="lang" />{txts.otherLang}</a
					>
					<a href="#skills">{txts.skills}</a>
					<a href="#focus">{txts.focus}</a>
				</nav>
			</div>
			<div class="desc">
				{
					getEntry(lang, "description").then((e) =>
						e.render().then(({ Content }) => <Content />),
					)
				}
			</div>
		</div>
	</header>
	<main>
		<section id="skills_section" class="container">
			<h2 id="skills">{txts.skills}</h2>
			<h3>
				{txts.lang}
				<span style="float: right"><Icon name="lang" /></span>
			</h3>
			<div class="lang">
				<div>
					<b>{txts.writen}</b>
					<Progress value={100} link="/fr/"> Francais </Progress>
					<Progress value={98} link="/en/"> English </Progress>
				</div>
				<div>
					<b>{txts.spoken}</b>
					<Progress value={100} link="/fr/">Francais</Progress>
					<Progress value={75} link="/en/">English</Progress>
				</div>
			</div>
			<SkillCarousel title={txts.prog} client:idle />
			<div class="hobby">
				<h3>
					{txts.hobby}
				</h3>
				<div>
					{
						txts.hobbyList.map((h) => (
							<article>
								<h1>{h.title}</h1>
								<p>{h.desc}</p>
							</article>
						))
					}
				</div>
			</div>
		</section>
		<section id="focus_section" class="container-fluid">
			<h2 id="focus">{txts.focus}</h2>
			<div>
				{
					getCollection("focus").then((c) =>
						c.map((a) => {
							const [fLang, ...slug] = a.slug.split("/");
							if (fLang === lang) return;
							const link = `/${lang}/focus/${slug.join("/")}`;
							return (
								<a href={link}>
									<article>
										<h1>{a.data.title}</h1>
										<p>{a.data.short}</p>
									</article>
								</a>
							);
						}),
					)
				}
			</div>
		</section>
	</main>
	<footer></footer>
</Layout>

<script>
	document.addEventListener(
		"click",
		(e) => {
			if (e.target instanceof HTMLElement) {
				if (e.target.dataset["link"])
					window.location.href = e.target.dataset.link;
			}
		},
		false,
	);
</script>

<style lang="scss">
	[data-icon="lang"] {
		vertical-align: -10%;
	}

	header {
		padding: 1rem;
		background-color: var(--pico-primary-background);

		> div {
			display: flex;
			flex-direction: column;
		}

		.left {
			display: flex;
			flex-direction: column;
			align-items: center;
			row-gap: 1rem;
			padding: 1rem;

			background: var(--pico-primary-background);
			--pico-color: var(--pico-primary-inverse);
			:global(*) {
				--pico-color: var(--pico-primary-inverse);
			}

			nav {
				grid-area: nav;
				display: flex;
				justify-content: center;
				align-items: center;
				text-align: center;
				width: 100%;

				a {
					box-sizing: border-box;
					display: block;
					width: 100%;
					padding: 1rem;
					color: var(--pico-primary-inverse);
					text-decoration: none;
				}

				a:is([aria-current]) {
					text-decoration: underline;
				}

				a:hover {
					box-shadow: inset 0px 0px 0px var(--pico-border-width)
						var(--pico-primary-inverse);
				}
			}

			> b {
				grid-area: name;
				text-align: center;
				color: var(--pico-color);
			}

			.portrait {
				grid-area: img;
				position: relative;
				width: 10rem;
				height: 10rem;

				> button {
					position: absolute;
					bottom: 0;
					right: 0;
					border: none;
					padding: 0;
					--pico-line-height: 1rem;

					&:focus {
						box-shadow: none;
					}
				}
				img {
					object-fit: contain;
					height: 100%;
					width: 100%;
					background-color: rgba(0, 0, 0, 50%);
					clip-path: circle(49%);
				}
			}
		}

		.desc {
			padding: 2rem;
			background-color: var(--pico-background-color);
		}
	}

	main {
		padding-block: 0;

		#skills_section {
			display: flex;
			flex-direction: column;
			padding-top: 2rem;

			.lang {
				display: flex;
				column-gap: 1rem;
				> div {
					flex-grow: 1;
				}
			}

			.hobby {
				> div {
					display: flex;
					flex-wrap: wrap;
					gap: 1rem;
					justify-content: space-around;
					> article {
						width: 18rem;
						min-height: 10rem;
						--tmp-font-size: var(--pico-font-size);
						h1 {
							font-size: var(--tmp-font-size);
						}
					}
				}
			}
		}

		#focus_section {
			padding: 1rem;
			margin-bottom: 0;
			background-color: var(--pico-secondary-background);

			#focus {
				--pico-color: var(--pico-secondary-inverse);
				text-align: center;
			}

			> div {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				padding-inline: 1rem;
				justify-content: space-around;

				> a {
					--pico-color: var(--pico-h1-color);
					text-decoration: unset;
					display: block;
					width: 20rem;
					background: var(--pico-background-color);

					transition: transform 0.2s;
					&:hover {
						transform: scale(101%) rotate(0.001turn);
					}
				}
			}
		}
	}

	footer {
		height: 2rem;
		width: 100%;
	}

	@media (min-width: 768px) {
		header {
			padding-left: 0;
			> div {
				flex-direction: row;
			}
			.left {
				nav {
					flex-direction: column;
				}
			}
		}
		main {
			#skills_section {
			}
		}
	}
</style>
